/*
 *  manatee.jj
 *
 *  A JavaCC specification for a subset of Manatee.
 */

options {
    UNICODE_INPUT = true;
    STATIC = false;
}





PARSER_BEGIN(SyntaxChecker)

package edu.lmu.cs.xlg.manatee.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.manatee.entities.*;


public class SyntaxChecker {
    public static void main(String[] args) {
        try {
            new SyntaxChecker(new java.io.StringReader(args[0])).S();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}

PARSER_END(SyntaxChecker)



SKIP: {
    " " | "\t" | <"--" (~["\n","\r"])*>
}

// Reserved Words and symbols

TOKEN: {
    "I" | "EI" | "E" | "DF" | "DC" | "L" | "R" | "B"
    | "N" | "S" | "C" | "Y" | "< >" | "T" | "F" | "P" | "LU" | "LF"
    | "LW"| ":" | "," | "+" | "-" | "*" | "/" | "==" | "^"
    | "<" | "<=" | "=" | ">=" | ">" | "(" | ")" | "[" | "]"
|
    < BR: "\n" | "\r" | "\r\n" >
|
    < NUMLIT: (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? >
|
    < #EXPONENT: ("x"|"") "10^" ("-")? (["0"-"9"])+ >
|
    < CHARLIT:
        "'"
        (
            ~["'", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ["n", "t", "\"", "\'", "\\"]
        )
        "'"
    >
|
    < STRLIT:
        "\""
        (
            ~["\"", "\\" ,"\u0000"-"\u001f", "\u007f"-"\u009f"]
        |
            "\\" ["n", "t", "\"", "\'", "\\"]
        )*
        "\""
    >
|
    < ID: <LETTER> (<LETTER>|<DIGIT>|"_")* >
|
	< BOOL : ["T", "F"] >
| 
    < #LETTER: [
    "\u0061"-"\u007a"
    ] >
|
    < #DIGIT: [
    "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef",
    "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f",
    "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u0f20"-"\u0f29",
    "\u1040"-"\u1049", "\u1369"-"\u1371", "\u17e0"-"\u17e9", "\u1810"-"\u1819", "\u1946"-"\u194f",
    "\uff10"-"\uff19"
    ] >
}

// -------------------
// SCRIPT ->  (STMT BR)+
// -------------------

Script SCRIPT(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    
    (s = STMT() {statements.add(s);})(<BR>)
    <EOF>
    {return new Script(statements);}
}

Arguments ARGS():
{
	List<Expression > arguments = new ArrayList<Expression >();
	Expression e;
	Expression e1;
}
{
	(
	  "(" e = EXP()
	  {
	    arguments.add(e);
	  }
	  (
	    e1 = EXP() ","
	    {
	      arguments.add(e1);
	    }
	  )* ")"
	  {
	    return new Arguments(arguments); //needs a Java file
	  })
	  
}

// ---------------------------------------------------------------------
// STMT -> 	    |  DEC
//              |  ASSIGNMENT
//              |  PRINTSTMT
//              |  CONDITIONAL
//              |  LOOP
//              |  EXP
//              |  RETURNSTMT
// ---------------------------------------------------------------------

Statement STMT(): {
    Statement s;
    ModifiedStatement.Modifier m = null;
}{
    (
        LOOKAHEAD(3)s = DEC()
    |
        LOOKAHEAD(2)s = ASSIGNMENT()
    |
        s = PRINTSTMT() 
    |
        s = CONDITIONAL() 
    |
        s = LOOP() 
    |
        LOOKAHEAD(3)s = EXP()
    | 
        s = RETURNSTMT()
    )
    {return s;}
}

//----------------------------------
// ASSIGNMENT    - >  ID '=' EXP
//----------------------------------

AssignmentStatement ASSIGNMENT():
{
  Expression target;
  Expression source;
}
{
  (
    target = < ID > "=" source = EXP())
    {
      return new AssignmentStatement(target, source);
    }
    

}

PrintStatement PRINTSTMT():
{
   Expression exp;

}
{
 ("P " exp = EXP())
 {
   return new PrintStatement(exp); //needs a Java file
 }
 
}

ReturnStatement RETURNSTMT():
{
   Expression exp;
}
{
 ("R" exp = EXP())
 {
   return new ReturnStatement(exp); //needs a Java file
 }
 
} 

// ---------------------------------
// DEC -> VARDEC | FUNCDEC
// ---------------------------------

Statement DEC(): {
    Statement s;
}{
    (
        s = VARDEC()
    |
        s = FUNDEC()
    )
    {return s;}
}

// --------------------------------
// VARDEC -> TYPE ID '=' EXP
// --------------------------------

Variable VARDEC(): {
    String i = null;
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
}{
    v = <ID>
    (
        LOOKAHEAD(2)("_" {constant = true;})? e = EXP()
    |
        LOOKAHEAD(2) (t = TYPE())
    )
    {return new Variable(v.image, t, e, constant);} // needs to be made spitfire
}

// ---------------------
// TYPE -> truth value
//     |  character
//     |  whole? number
//     |  string
//     |  TYPE list
// ---------------------

String TYPE(): {
    String t;
    Token tok;
    StringBuilder builder = new StringBuilder();
}{
    (
        "B" {t = "boolean";}
    |
        "C" {t = "character";}
    |
        "S" {t = "String";}
    |
        "Y" {t = "any";}
    |
        "N" {t = "number";}
    |
  		< ID >
  		{
  		  t = "object";
  		}
    |
 		"< >"
 		{
 		  t = "null";
 		}
|
		"[" TYPE() "]"
		{
		  t = "array";
		}
    )
    {builder.append(t);}
    {return builder.toString();}
}

// Do we need to remove the following commented code? - TM

// ----------------------------------
// PROCDEC -> to ID PARAMS? BLOCK end
// ----------------------------------
/*
Procedure PROCDEC(): {
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;
}{
    "to" name = <ID> (PARAMS(params))? body = BLOCK() "end"
    {return new Procedure(name.image, params, body);}
}
*/

// ----------------------------------------------------------------------
// FUNDEC -> 'DF' ID ARGS BR BLOCK
// ----------------------------------------------------------------------

Function FUNDEC(): {
    String type;
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;

}{
    "DF"
    name = <ID>
    (ARGS())?
    
    body = BLOCK()
    {return new Function(type, name.image, params, body);}
}

// ----------------------------------------------------
// PARAMS -> '(' ID (ID ',')* ')'
// ----------------------------------------------------

void PARAMS(List<Variable> params): {
    String t;
    Token p;
}{
    "(" p = < ID >
    { params.add(new Variable(p));
    }
    (
      p = < ID > ","
      {
        params.add(new Variable(p));
      }
      )* ")"
}

// ----------------------
// BLOCK -> (BR STMT)+
// ----------------------

Block BLOCK(): {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
}{
    ":" (<BR>)+ ( s = STMT() {statements.add(s);} )+
    {return new Block(statements);}
}

// ------------------------------------------------------------------
// CONDITIONAL -> 'I' EXP BLOCK ('EF' EXP BLOCK)* ('E' BLOCK)?
// ------------------------------------------------------------------

Statement CONDITIONAL(): {
    ConditionalStatement.Arm arm;
    List<ConditionalStatement.Arm> arms = new ArrayList<ConditionalStatement.Arm>();
    Expression e;
    Block b;
    Block elseBlock = null;
}{
    "I" e = EXP() b = BLOCK()
    {arms.add(new ConditionalStatement.Arm(e, b));}
    (
        LOOKAHEAD(2)"|" "EI" e = EXP() b = BLOCK()
        {arms.add(new ConditionalStatement.Arm(e, b));}
    )*
    (
        "E" elseBlock = BLOCK()
    )?
    //"end"
    {return new ConditionalStatement(arms, elseBlock);}
}

// -----------------------------------------------------
// LOOP        -> LOOPCONTROL BLOCK end
// LOOPCONTROL -> loop (EXP times)?
//             |  while EXP
//             |  for each ID in EXP (to EXP (by EXP)?)?
// -----------------------------------------------------
//needs more work

Statement LOOP(): {
    Token t = null;
    Expression e = null;
    Expression e2 = null;
    Expression e3 = null;
    Block b;
}{
    (
        "LU" (e = EXP())< BR > b = BLOCK() 
        {return e == null ? new PlainLoop(b) : new TimesLoop(e, b);}
    |
        "LW" e = EXP() b = BLOCK() 
        {return new WhileLoop(e, b);}
    |
        "LF" t = <ID>  e = EXP() e2 = EXP() (e3 = EXP())? <BR> BLOCK()//???
        b = BLOCK() 
        {
            if (e3 == null) {
                return new CollectionLoop(t.image, e,e2, b); //looping through objects
            } else {
                return new RangeLoop(t.image, e, e2, e3, b); //regular for loop
            }
        }
    )
}

// ----------------------
// EXP -> EXP1 (or EXP1)*
// ----------------------

Expression EXP(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP1()
    ("||" e2 = EXP1() {e1 = new BinaryExpression(e1, "||", e2);})*
    {return e1;}
}

// ------------------------
// EXP1 -> EXP2 (and EXP2)*
// ------------------------

Expression EXP1(): {
    Expression e1;
    Expression e2;
}{
    e1 = EXP2()
    ("&&" e2 = EXP2() {e1 = new BinaryExpression(e1, "and", e2);})*
    {return e1;}
}

// --------------------------
// EXP2 -> EXP3 (RELOP EXP3)?
// --------------------------

Expression EXP2(): {
    String op;
    Expression e1;
    Expression e2;
}{
    e1 = EXP3()
    (
        op = RELOP()
        e2 = EXP3()
        {e1 = new BinaryExpression(e1, op, e2);}
    )?
    {return e1;}
}

// ----------------------------
// EXP3 -> EXP4 (ADDOP EXP4)?
// ----------------------------

Expression EXP3(): {
    String op;
    Expression e1;
    Expression e2;
}{
    LOOKAHEAD(2) e1 = EXP4()
    (
        op = ADDOP()
        e2 = EXP4()
        {e1 = new BinaryExpression(e1, op, e2);}
    )?
    {return e1;}
}

// --------------------------
// EXP4 -> EXP5 (MULOP EXP5)*
// --------------------------

Expression EXP4(): {
    String op;
    Expression e1;
}{
    e1 = EXP5()
    (
        op = MULOP()
        e2 = EXP5()
        {e1 = new BinaryExpression(e1, op, e2);}
    )*
    {return e1;}
}

// --------------------------
// EXP5 -> PREFIXOP? EXP6
// --------------------------

Expression EXP5(): {
    String op;
    Expression e1;
    Expression e2;
}{
    (op = PREFIXOP())? e = EXP6()
    {return op == null ? e : new UnaryExpression(op, e);}
}


// -------------------------
// EXP6 -> BOOL | NUMLIT | STRLIT | ID | '(' EXP ')' | EXP '[' EXP ']' | ID ARGS
// -------------------------

Expression EXP6(): {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e = null;
    Expression e2 = null;
    Token t;
}{
    (
        LOOKAHEAD(2) e = EXP7() 
        {return e;}

    |
        LOOKAHEAD(2) e2 = EXP7() "[" e = EXP7() "]"
        {return new ArrayConstructor(expressions);} //need to fix
    |
        "(" e = EXP7() ")"
        {return e;}
    )
}

Expression EXP7():
{
	Expression e2 = null;
    Token t;
}{
    (
        e = < BOOL >
        {return e;}
    |
        e = < NUMLIT >
        {return e;}
    |
        e = < STRLIT >
        {return e;}
    |
        t = <ID>
        {return new IdentifierExpression(t.image);}
    
  )
}


// Do the following comments need to be deleted since it isn't in our language? - TM

/*// ------------------
// LITERAL -> nothing
//         |  yes
//         |  no
//         |  INTLIT
//         |  NUMLIT
//         |  CHARLIT
//         |  STRLIT
// ------------------

Literal LITERAL(): {
    Token t;
}{
    "<>" {return NullLiteral.INSTANCE;}
|
    "T" {return BooleanLiteral.TRUE;}
|
    "F" {return BooleanLiteral.FALSE;}
|
    t = <INTLIT> {return new WholeNumberLiteral(t.image);}
|
    t = <NUMLIT> {return new NumberLiteral(t.image);}
|
    t = <CHARLIT> {return new CharacterLiteral(t.image);}
|
    t = <STRLIT> {return new StringLiteral(t.image);}
}

// -------------------------
// EXPLIST -> EXP (',' EXP)*
// -------------------------

List<Expression> EXPLIST(): {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e;
}{
    e = EXP() {expressions.add(e);}
    ("," e = EXP() {expressions.add(e);})*
    {return expressions;}
}
*/

// ------------------------------------------------------
// RELOP -> '<' | '<=' | '==' | '!=' | '>=' | '>' |
// ------------------------------------------------------

String RELOP(): {
}{
    "<" {return "<";}
    |
    "<=" {return "<=";}
    |
    "==" {return "==";}
    |
    "!=" {return "!=";}
    |
    ">=" {return ">=";}
    |
    ">" {return ">";}
  
}

// -----------------------
// ADDOP -> '+' | '-' |
// -----------------------

String ADDOP(): {
    Token t;
}{
    (t = "+" | t = "-" )
    {return t.image;}
}

// ------------------
// '*' | '/' | '%' | '^' | '**'
// ------------------

String MULOP(): {
    Token t;
}{
    (t = "*" | t = "/" | t = "%" | t = "^" | t = "**")
    {return t.image;}
}

// -------------------------------
// PREFIX -> '-' | "!" | "~"
// -------------------------------

String PREFIXOP(): {
    Token t;
}{
    (t = "-" | t = "!" | t= "~")
    {return t.image;}
}
