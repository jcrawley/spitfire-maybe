/* Generated By:JavaCC: Do not edit this line. Parser.java */
package edu.lmu.cs.xlg.manatee.syntax;

import java.util.List;
import java.util.ArrayList;
import java.io.Reader;
import edu.lmu.cs.xlg.util.Log;
import edu.lmu.cs.xlg.manatee.entities.*;

public class Parser implements ParserConstants {

    /**
     * Returns the result of parsing the Manatee program on the given Reader.
     */
    public Script parse(Log log) {
        try {
            return SCRIPT();
        } catch (TokenMgrError e) {
            log.exception(e);
            return null;
        } catch (ParseException e) {
            log.exception(e);
            return null;
        }
    }

// -------------------
// SCRIPT ->  (STMT BR)+
// -------------------
  final public Script SCRIPT() throws ParseException {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
    s = STMT();
                 statements.add(s);
    jj_consume_token(BR);
    jj_consume_token(0);
     {if (true) return new Script(statements);}
    throw new Error("Missing return statement in function");
  }

  final public Arguments ARGS() throws ParseException {
        List<Expression > arguments = new ArrayList<Expression >();
        Expression e;
        Expression e1;
    jj_consume_token(36);
    e = EXP();
            arguments.add(e);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 36:
      case NUMLIT:
      case STRLIT:
      case ID:
      case BOOL:
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      e1 = EXP();
      jj_consume_token(24);
              arguments.add(e1);
    }
    jj_consume_token(37);
            {if (true) return new Arguments(arguments);} //needs a Java file

    throw new Error("Missing return statement in function");
  }

// ---------------------------------------------------------------------
// STMT -> 	    |  DEC
//              |  ASSIGNMENT
//              |  PRINTSTMT
//              |  CONDITIONAL
//              |  LOOP
//              |  EXP
//              |  RETURNSTMT
// ---------------------------------------------------------------------
  final public Statement STMT() throws ParseException {
    Statement s;
    ModifiedStatement.Modifier m = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 7:
    case ID:
      s = DEC();
      break;
      s = ASSIGNMENT();
      break;
    case 49:
      s = PRINTSTMT();
      break;
    case 4:
      s = CONDITIONAL();
      break;
    case 20:
    case 21:
    case 22:
      s = LOOP();
      break;
    case 26:
    case 36:
    case NUMLIT:
    case STRLIT:
    case BOOL:
    case 57:
    case 58:
      s = EXP();
      break;
    case 10:
      s = RETURNSTMT();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

//----------------------------------
// ASSIGNMENT    - >  ID '=' EXP
//----------------------------------
  final public AssignmentStatement ASSIGNMENT() throws ParseException {
  Expression target;
  Expression source;
    target = jj_consume_token(ID);
    jj_consume_token(33);
    source = EXP();
      {if (true) return new AssignmentStatement(target, source);}
    throw new Error("Missing return statement in function");
  }

  final public PrintStatement PRINTSTMT() throws ParseException {
   Expression exp;
    jj_consume_token(49);
    exp = EXP();
   {if (true) return new PrintStatement(exp);} //needs a Java file

    throw new Error("Missing return statement in function");
  }

  final public ReturnStatement RETURNSTMT() throws ParseException {
   Expression exp;
    jj_consume_token(10);
    exp = EXP();
   {if (true) return new ReturnStatement(exp);} //needs a Java file

    throw new Error("Missing return statement in function");
  }

// ---------------------------------
// DEC -> VARDEC | FUNCDEC
// ---------------------------------
  final public Statement DEC() throws ParseException {
    Statement s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      s = VARDEC();
      break;
    case 7:
      s = FUNDEC();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// --------------------------------
// VARDEC -> TYPE ID '=' EXP
// --------------------------------
  final public Variable VARDEC() throws ParseException {
    String i = null;
    String t = null;
    Token v = null;
    Expression e = null;
    boolean constant = false;
    v = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
    case 36:
    case NUMLIT:
    case STRLIT:
    case ID:
    case BOOL:
    case 50:
    case 57:
    case 58:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
              constant = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      e = EXP();
      break;
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 38:
      t = TYPE();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return new Variable(v.image, t, e, constant);}
    throw new Error("Missing return statement in function");
  }

// ---------------------
// TYPE -> truth value
//     |  character
//     |  whole? number
//     |  string
//     |  TYPE list
// ---------------------
  final public String TYPE() throws ParseException {
    String t;
    Token tok;
    StringBuilder builder = new StringBuilder();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 11:
      jj_consume_token(11);
             t = "boolean";
      break;
    case 14:
      jj_consume_token(14);
             t = "character";
      break;
    case 13:
      jj_consume_token(13);
             t = "String";
      break;
    case 15:
      jj_consume_token(15);
             t = "any";
      break;
    case 12:
      jj_consume_token(12);
             t = "number";
      break;
    case ID:
      jj_consume_token(ID);
                  t = "object";
      break;
    case 16:
      jj_consume_token(16);
                  t = "null";
      break;
    case 38:
      jj_consume_token(38);
      TYPE();
      jj_consume_token(39);
                  t = "array";
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     builder.append(t);
     {if (true) return builder.toString();}
    throw new Error("Missing return statement in function");
  }

// Do we need to remove the following commented code? - TM

// ----------------------------------
// PROCDEC -> to ID PARAMS? BLOCK end
// ----------------------------------
/*
Procedure PROCDEC(): {
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;
}{
    "to" name = <ID> (PARAMS(params))? body = BLOCK() "end"
    {return new Procedure(name.image, params, body);}
}
*/

// ----------------------------------------------------------------------
// FUNDEC -> 'DF' ID ARGS BR BLOCK
// ----------------------------------------------------------------------
  final public Function FUNDEC() throws ParseException {
    String type;
    Token name;
    List<Variable> params = new ArrayList<Variable>();
    Block body;
    jj_consume_token(7);
    name = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 36:
      ARGS();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    body = BLOCK();
     {if (true) return new Function(type, name.image, params, body);}
    throw new Error("Missing return statement in function");
  }

// ----------------------------------------------------
// PARAMS -> '(' ID (ID ',')* ')'
// ----------------------------------------------------
  final public void PARAMS(List<Variable> params) throws ParseException {
    String t;
    Token p;
    jj_consume_token(36);
    p = jj_consume_token(ID);
      params.add(new Variable(p));
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      p = jj_consume_token(ID);
      jj_consume_token(24);
        params.add(new Variable(p));
    }
    jj_consume_token(37);
  }

// ----------------------
// BLOCK -> (BR STMT)+
// ----------------------
  final public Block BLOCK() throws ParseException {
    List<Statement> statements = new ArrayList<Statement>();
    Statement s;
    jj_consume_token(23);
    label_3:
    while (true) {
      jj_consume_token(BR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
    }
    label_4:
    while (true) {
      s = STMT();
                              statements.add(s);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 4:
      case 7:
      case 10:
      case 20:
      case 21:
      case 22:
      case 26:
      case 36:
      case NUMLIT:
      case STRLIT:
      case ID:
      case BOOL:
      case 49:
      case 57:
      case 58:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
    }
     {if (true) return new Block(statements);}
    throw new Error("Missing return statement in function");
  }

// ------------------------------------------------------------------
// CONDITIONAL -> 'I' EXP BLOCK ('EF' EXP BLOCK)* ('E' BLOCK)?
// ------------------------------------------------------------------
  final public Statement CONDITIONAL() throws ParseException {
    ConditionalStatement.Arm arm;
    List<ConditionalStatement.Arm> arms = new ArrayList<ConditionalStatement.Arm>();
    Expression e;
    Block b;
    Block elseBlock = null;
    jj_consume_token(4);
    e = EXP();
    b = BLOCK();
     arms.add(new ConditionalStatement.Arm(e, b));
    label_5:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_5;
      }
      jj_consume_token(51);
      jj_consume_token(5);
      e = EXP();
      b = BLOCK();
         arms.add(new ConditionalStatement.Arm(e, b));
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
      elseBlock = BLOCK();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
     {if (true) return new ConditionalStatement(arms, elseBlock);}
    throw new Error("Missing return statement in function");
  }

// -----------------------------------------------------
// LOOP        -> LOOPCONTROL BLOCK end
// LOOPCONTROL -> loop (EXP times)?
//             |  while EXP
//             |  for each ID in EXP (to EXP (by EXP)?)?
// -----------------------------------------------------
//needs more work
  final public Statement LOOP() throws ParseException {
    Token t = null;
    Expression e = null;
    Expression e2 = null;
    Expression e3 = null;
    Block b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      e = EXP();
      jj_consume_token(BR);
      b = BLOCK();
         {if (true) return e == null ? new PlainLoop(b) : new TimesLoop(e, b);}
      break;
    case 22:
      jj_consume_token(22);
      e = EXP();
      b = BLOCK();
         {if (true) return new WhileLoop(e, b);}
      break;
    case 21:
      jj_consume_token(21);
      t = jj_consume_token(ID);
      e = EXP();
      e2 = EXP();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
      case 36:
      case NUMLIT:
      case STRLIT:
      case ID:
      case BOOL:
      case 57:
      case 58:
        e3 = EXP();
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      jj_consume_token(BR);
      BLOCK();
      //???
              b = BLOCK();
            if (e3 == null) {
                {if (true) return new CollectionLoop(t.image, e,e2, b);} //looping through objects
            } else {
                {if (true) return new RangeLoop(t.image, e, e2, e3, b);} //regular for loop
            }
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------
// EXP -> EXP1 (or EXP1)*
// ----------------------
  final public Expression EXP() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = EXP1();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      jj_consume_token(52);
      e2 = EXP1();
                       e1 = new BinaryExpression(e1, "||", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ------------------------
// EXP1 -> EXP2 (and EXP2)*
// ------------------------
  final public Expression EXP1() throws ParseException {
    Expression e1;
    Expression e2;
    e1 = EXP2();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(53);
      e2 = EXP2();
                       e1 = new BinaryExpression(e1, "and", e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// --------------------------
// EXP2 -> EXP3 (RELOP EXP3)?
// --------------------------
  final public Expression EXP2() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = EXP3();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 54:
      op = RELOP();
      e2 = EXP3();
         e1 = new BinaryExpression(e1, op, e2);
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ----------------------------
// EXP3 -> EXP4 (ADDOP EXP4)?
// ----------------------------
  final public Expression EXP3() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    e1 = EXP4();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
    case 26:
      op = ADDOP();
      e2 = EXP4();
         e1 = new BinaryExpression(e1, op, e2);
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// --------------------------
// EXP4 -> EXP5 (MULOP EXP5)*
// --------------------------
  final public Expression EXP4() throws ParseException {
    String op;
    Expression e1;
    e1 = EXP5();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 27:
      case 28:
      case 30:
      case 55:
      case 56:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_8;
      }
      op = MULOP();
      e2 = EXP5();
         e1 = new BinaryExpression(e1, op, e2);
    }
     {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// --------------------------
// EXP5 -> PREFIXOP? EXP6
// --------------------------
  final public Expression EXP5() throws ParseException {
    String op;
    Expression e1;
    Expression e2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
    case 57:
    case 58:
      op = PREFIXOP();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    e = EXP6();
     {if (true) return op == null ? e : new UnaryExpression(op, e);}
    throw new Error("Missing return statement in function");
  }

// -------------------------
// EXP6 -> BOOL | NUMLIT | STRLIT | ID | '(' EXP ')' | EXP '[' EXP ']' | ID ARGS
// -------------------------
  final public Expression EXP6() throws ParseException {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e = null;
    Expression e2 = null;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMLIT:
    case STRLIT:
    case ID:
    case BOOL:
      e = EXP7();
         {if (true) return e;}
      break;
      t = jj_consume_token(ID);
         {if (true) return new IdentifierExpression(t.image);}
      break;
      e2 = EXP7();
      jj_consume_token(38);
      e = EXP7();
      jj_consume_token(39);
         {if (true) return new ArrayConstructor(expressions);}
      break;
    case 36:
      jj_consume_token(36);
      e = EXP7();
      jj_consume_token(37);
         {if (true) return e;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression EXP7() throws ParseException {
        Expression e2 = null;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
      e = jj_consume_token(BOOL);
         {if (true) return e;}
      break;
    case NUMLIT:
      e = jj_consume_token(NUMLIT);
         {if (true) return e;}
      break;
    case STRLIT:
      e = jj_consume_token(STRLIT);
         {if (true) return e;}
      break;
    case ID:
      t = jj_consume_token(ID);
         {if (true) return new IdentifierExpression(t.image);}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Do the following comments need to be deleted since it isn't in our language? - TM

/*// ------------------
// LITERAL -> nothing
//         |  yes
//         |  no
//         |  INTLIT
//         |  NUMLIT
//         |  CHARLIT
//         |  STRLIT
// ------------------

Literal LITERAL(): {
    Token t;
}{
    "nothing" {return NullLiteral.INSTANCE;}
|
    "yes" {return BooleanLiteral.TRUE;}
|
    "no" {return BooleanLiteral.FALSE;}
|
    t = <INTLIT> {return new WholeNumberLiteral(t.image);}
|
    t = <NUMLIT> {return new NumberLiteral(t.image);}
|
    t = <CHARLIT> {return new CharacterLiteral(t.image);}
|
    t = <STRLIT> {return new StringLiteral(t.image);}
}

// -------------------------
// EXPLIST -> EXP (',' EXP)*
// -------------------------

List<Expression> EXPLIST(): {
    List<Expression> expressions = new ArrayList<Expression>();
    Expression e;
}{
    e = EXP() {expressions.add(e);}
    ("," e = EXP() {expressions.add(e);})*
    {return expressions;}
}
*/

// ------------------------------------------------------
// RELOP -> '<' | '<=' | '==' | '!=' | '>=' | '>' |
// ------------------------------------------------------
  final public String RELOP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
         {if (true) return "<";}
      break;
    case 32:
      jj_consume_token(32);
          {if (true) return "<=";}
      break;
    case 33:
      jj_consume_token(33);
         {if (true) return "=";}
      break;
    case 54:
      jj_consume_token(54);
          {if (true) return "!=";}
      break;
    case 34:
      jj_consume_token(34);
          {if (true) return ">=";}
      break;
    case 35:
      jj_consume_token(35);
         {if (true) return ">";}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// -----------------------
// ADDOP -> '+' | '-' |
// -----------------------
  final public String ADDOP() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 25:
      t = jj_consume_token(25);
      break;
    case 26:
      t = jj_consume_token(26);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

// ------------------
// '*' | '/' | '%' | '^' | '**'
// ------------------
  final public String MULOP() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 27:
      t = jj_consume_token(27);
      break;
    case 28:
      t = jj_consume_token(28);
      break;
    case 55:
      t = jj_consume_token(55);
      break;
    case 30:
      t = jj_consume_token(30);
      break;
    case 56:
      jj_consume_token(56);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

// -------------------------------
// PREFIX -> '-' | "!" | "~"
// -------------------------------
  final public String PREFIXOP() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 26:
      t = jj_consume_token(26);
      break;
    case 57:
      t = jj_consume_token(57);
      break;
    case 58:
      t = jj_consume_token(58);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return t.image;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(51)) return true;
    if (jj_scan_token(5)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[25];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000000,0x4700490,0x80,0x0,0x401f800,0x1f800,0x0,0x0,0x0,0x4700490,0x40,0x4000000,0x700000,0x0,0x0,0x80000000,0x6000000,0x58000000,0x4000000,0x0,0x0,0x80000000,0x6000000,0x58000000,0x4000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6007210,0x6027210,0x2000,0x40000,0x6047250,0x2040,0x10,0x2000,0x100,0x6027210,0x0,0x6007210,0x0,0x100000,0x200000,0x40000f,0x0,0x1800000,0x6000000,0x7210,0x7200,0x40000f,0x0,0x1800000,0x6000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 25; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 25; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
